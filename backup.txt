# from statsmodels.tsa.seasonal import seasonal_decompose
# from sklearn.model_selection import train_test_split
# from sklearn.ensemble import RandomForestRegressor
# from sklearn.metrics import mean_squared_error
# from sklearn.ensemble import IsolationForest

# def page_eda():
#     st.title("üîç An√°lisis Exploratorio de Datos (EDA)")

#     # Cargar datos
#     ruta_archivo = 'Tablas/corriente_alimentador_2024.parquet'
#     df = cargar_datos(ruta_archivo)

#     # Mostrar estad√≠sticas descriptivas
#     st.subheader("Estad√≠sticas Descriptivas")
#     st.write(df.describe())

#     # Distribuci√≥n de valores
#     st.subheader("Distribuci√≥n de Valores")
#     columna = st.selectbox("Seleccione una columna para visualizar su distribuci√≥n:", df.columns)
#     fig = px.histogram(df, x=columna, title=f"Distribuci√≥n de {columna}")
#     st.plotly_chart(fig)

#     # Detecci√≥n de valores nulos
#     st.subheader("Valores Nulos")
#     st.write(df.isnull().sum())

# def page_series_tiempo():
#     st.title("‚è≥ An√°lisis de Series de Tiempo")

#     # Cargar datos
#     ruta_archivo = 'Tablas/corriente_alimentador_2024.parquet'
#     df = cargar_datos(ruta_archivo)

#     # Seleccionar ALIM
#     alim_unicos = df['ALIM'].unique()
#     selected_alim = st.selectbox("Seleccione un alimentador (ALIM):", options=alim_unicos)

#     if selected_alim:
#         # Filtrar datos
#         filtered_df = df[df['ALIM'] == selected_alim].set_index('TIME')

#         # Descomposici√≥n de la serie de tiempo
#         st.subheader("Descomposici√≥n de la Serie de Tiempo")
#         decomposition = seasonal_decompose(filtered_df['VALUE'], model='additive', period=24)  # Ajusta el per√≠odo seg√∫n tus datos
#         st.write("Tendencia")
#         st.line_chart(decomposition.trend)
#         st.write("Estacionalidad")
#         st.line_chart(decomposition.seasonal)
#         st.write("Residuos")
#         st.line_chart(decomposition.resid)

# def page_modelado():
#     st.title("ü§ñ Modelado Predictivo")

#     # Cargar datos
#     ruta_archivo = 'Tablas/corriente_alimentador_2024.parquet'
#     df = cargar_datos(ruta_archivo)

#     # Seleccionar ALIM
#     alim_unicos = df['ALIM'].unique()
#     selected_alim = st.selectbox("Seleccione un alimentador (ALIM):", options=alim_unicos)

#     if selected_alim:
#         # Filtrar datos
#         filtered_df = df[df['ALIM'] == selected_alim]

#         # Preparar datos para el modelo
#         filtered_df['TIME'] = pd.to_datetime(filtered_df['TIME'])
#         filtered_df['HORA'] = filtered_df['TIME'].dt.hour
#         filtered_df['DIA'] = filtered_df['TIME'].dt.day
#         filtered_df['MES'] = filtered_df['TIME'].dt.month

#         X = filtered_df[['HORA', 'DIA', 'MES']]
#         y = filtered_df['VALUE']

#         # Dividir datos en entrenamiento y prueba
#         X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#         # Entrenar modelo
#         model = RandomForestRegressor(n_estimators=100, random_state=42)
#         model.fit(X_train, y_train)

#         # Predecir
#         y_pred = model.predict(X_test)

#         # Mostrar m√©tricas
#         st.subheader("M√©tricas del Modelo")
#         mse = mean_squared_error(y_test, y_pred)
#         st.write(f"Error Cuadr√°tico Medio (MSE): {mse}")

#         # Gr√°fico de predicciones vs valores reales
#         st.subheader("Predicciones vs Valores Reales")
#         fig = px.scatter(x=y_test, y=y_pred, labels={'x': 'Valor Real', 'y': 'Predicci√≥n'}, title="Predicciones vs Valores Reales")
#         st.plotly_chart(fig)

# def page_modelado():
#     st.title("ü§ñ Modelado Predictivo")

#     # Cargar datos
#     ruta_archivo = 'Tablas/corriente_alimentador_2024.parquet'
#     df = cargar_datos(ruta_archivo)

#     # Seleccionar ALIM
#     alim_unicos = df['ALIM'].unique()
#     selected_alim = st.selectbox("Seleccione un alimentador (ALIM):", options=alim_unicos)

#     if selected_alim:
#         # Filtrar datos
#         filtered_df = df[df['ALIM'] == selected_alim]

#         # Preparar datos para el modelo
#         filtered_df['TIME'] = pd.to_datetime(filtered_df['TIME'])
#         filtered_df['HORA'] = filtered_df['TIME'].dt.hour
#         filtered_df['DIA'] = filtered_df['TIME'].dt.day
#         filtered_df['MES'] = filtered_df['TIME'].dt.month

#         X = filtered_df[['HORA', 'DIA', 'MES']]
#         y = filtered_df['VALUE']

#         # Dividir datos en entrenamiento y prueba
#         X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#         # Entrenar modelo
#         model = RandomForestRegressor(n_estimators=100, random_state=42)
#         model.fit(X_train, y_train)

#         # Predecir
#         y_pred = model.predict(X_test)

#         # Mostrar m√©tricas
#         st.subheader("M√©tricas del Modelo")
#         mse = mean_squared_error(y_test, y_pred)
#         st.write(f"Error Cuadr√°tico Medio (MSE): {mse}")

#         # Gr√°fico de predicciones vs valores reales
#         st.subheader("Predicciones vs Valores Reales")
#         fig = px.scatter(x=y_test, y=y_pred, labels={'x': 'Valor Real', 'y': 'Predicci√≥n'}, title="Predicciones vs Valores Reales")
#         st.plotly_chart(fig)

# def page_anomalias():
#     st.title("üö® Detecci√≥n de Anomal√≠as")

#     # Cargar datos
#     ruta_archivo = 'Tablas/corriente_alimentador_2024.parquet'
#     df = cargar_datos(ruta_archivo)

#     # Seleccionar ALIM
#     alim_unicos = df['ALIM'].unique()
#     selected_alim = st.selectbox("Seleccione un alimentador (ALIM):", options=alim_unicos)

#     if selected_alim:
#         # Filtrar datos
#         filtered_df = df[df['ALIM'] == selected_alim]

#         # Entrenar modelo de detecci√≥n de anomal√≠as
#         model = IsolationForest(contamination=0.05, random_state=42)  # Ajusta el par√°metro de contaminaci√≥n
#         filtered_df['ANOMALIA'] = model.fit_predict(filtered_df[['VALUE']])

#         # Filtrar anomal√≠as
#         anomalias = filtered_df[filtered_df['ANOMALIA'] == -1]

#         # Mostrar anomal√≠as
#         st.subheader("Anomal√≠as Detectadas")
#         st.write(anomalias)

#         # Gr√°fico de anomal√≠as
#         st.subheader("Gr√°fico de Anomal√≠as")
#         fig = px.scatter(filtered_df, x='TIME', y='VALUE', color='ANOMALIA', title="Detecci√≥n de Anomal√≠as")
#         st.plotly_chart(fig)


# Barra lateral para navegaci√≥n
st.sidebar.title("Navegaci√≥n")
pagina_seleccionada = st.sidebar.radio(
    "Seleccione la p√°gina",
    ["Bienvenida", "Corriente por Distribuidor", "Potencia por ET", "Corriente de LAT", "Mapa de Reclamos"] #"EDA", "Series de Tiempo", "Modelado", "Anomal√≠as"
)

# Llamar a la p√°gina seleccionada
if pagina_seleccionada == "Bienvenida":
    page_bienvenida()
elif pagina_seleccionada == "Corriente por Distribuidor":
    page_corriente_dist()
elif pagina_seleccionada == "Potencia por ET":
    page_potencia_et()
elif pagina_seleccionada == "Corriente de LAT":
    page_corriente_lat()
